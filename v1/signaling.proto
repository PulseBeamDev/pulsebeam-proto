syntax = "proto3";

package pulsebeam.v1;
option optimize_for = CODE_SIZE;

service Signaling {
  rpc Prepare(PrepareReq) returns (PrepareResp);
  rpc Send(SendReq) returns (SendResp);
  rpc Recv(RecvReq) returns (stream RecvResp);
  rpc AnalyticsReport(AnalyticsReportReq) returns (AnalyticsReportResp);
}

message PrepareReq {
}

message PrepareResp {
  repeated IceServer ice_servers = 1;
}

message IceServer {
  repeated string urls = 1;
  optional string username = 2;
  optional string credential = 3;
}

message SendReq {
  Message msg = 1;
}

message SendResp {
}

message RecvReq {
  PeerInfo src = 1;
}

message RecvResp {
  Message msg = 1;
}

message PeerInfo {
  string group_id = 1;
  // where this message is originated from. Special values: "SYSTEM"
  string peer_id = 2;
  // used for deciding polite vs impolite. higher id wins. It also is used to detect connection breakages
  // WARNING, reserved values: 0-16
  uint32 conn_id = 3; 
}

// Use small tag numbers (1-15) for fields that are frequently used or are performance-sensitive, even if they are optional.
// Larger tag numbers (16 and above) can be used for fields that are optional and not frequently included in messages, as they will require more bytes to encode.
// Avoid the 19000â€“19999 range, as it's reserved.
// Consider future-proofing your schema by leaving gaps between field numbers to allow for extensions or new fields later.
message Message {
  MessageHeader header = 1;

  // payload will be treated as opaque in backend. Size limit is 10kB.
  MessagePayload payload = 2;
}

message MessagePayload {
  oneof payload_type {
    Signal signal = 1;
    Join join = 2;
    Bye bye = 3;
    Ack ack = 4;
    Ping ping = 5;
  }
}

message MessageHeader {
  PeerInfo src = 1;
  PeerInfo dst = 2;

  uint32 seqnum = 7;
  bool reliable = 8; // true: tcp like, false: fire & forget
}

message Signal {
  uint32 generation_counter = 1;
  // reserved for headers
  oneof data {
    Sdp sdp = 9;
    ICECandidate ice_candidate = 10;
    ICECandidateBatch ice_candidate_batch = 11;
  }
}

enum SdpKind {
  SDP_KIND_UNSPECIFIED = 0;
  SDP_KIND_OFFER = 1;
  SDP_KIND_ANSWER = 2;
  SDP_KIND_PRANSWER = 3;
  SDP_KIND_ROLLBACK = 4;
}

message Sdp {
  SdpKind kind = 1;
  string sdp = 2;
}

message ICECandidateBatch {
  repeated ICECandidate candidates = 1;
}

message ICECandidate {
  string candidate = 1;
  optional uint32 sdp_m_line_index = 2;
  optional string sdp_mid = 3;
  optional string username = 4;
  optional string password = 5;
}

message Join {
}

message Bye {
}

message Ack {
  repeated AckRange ack_ranges = 1;
}

message Ping {}

message AckRange {
  uint32 seqnum_start = 1;
  uint32 seqnum_end = 2;
}

message DataChannel {
  // reserved for headers

  oneof payload {
    DataChannelHeartbeat heartbeat = 10;
  }
}

message DataChannelHeartbeat {
}

message AnalyticsReportReq {
  repeated AnalyticsReport reports = 1;
}

message AnalyticsReport {
  AnalyticsTags tags = 1;
  repeated AnalyticsMetrics metrics = 2; 
}

message AnalyticsTags {
  PeerInfo src = 1;
  PeerInfo dst = 2;
}

// "scaled" = trunc(X * 10^3)
message AnalyticsMetrics {
  sint64 timestamp_us = 1;

  // events
  optional ErrorEvent error_event = 2;
  optional IceCandidateEvent ice_candidate_event = 3;
  optional SignalingEvent signaling_event = 4;
  optional UserInteractionEvent user_interaction_event = 5;
  optional MediaHandlingEvent media_handling_event = 6;
  optional IceConnectionType ice_connection_type = 7;

  // The overall derived quality score:
  // - 80-100: excellent
  // - 60-79: good
  // - 40-59: fair
  // - 20-39: poor
  // - 0-19: bad
  optional sint64 quality_score = 17;
  optional sint64 rtt_us = 18;
}

message AnalyticsReportResp {
}

message AnalyticsEvent {
  oneof kind {
    ErrorEvent error_event = 2;
    IceCandidateEvent ice_candidate_event = 3;
    SignalingEvent signaling_event = 4;
    UserInteractionEvent user_interaction_event = 5;
    MediaHandlingEvent media_handling_event = 6;
    IceConnectionType ice_connection_type = 7;
  }
}

enum ErrorEvent {
  ERROR_EVENT_UNSPECIFIED = 0;
  ERROR_SIGNALING_CONNECTION_FAILED = 1;
  ERROR_ICE_CONNECTION_FAILED = 2;
  ERROR_MEDIA_CAPTURE_AUDIO_FAILED = 3;
  ERROR_MEDIA_CAPTURE_VIDEO_FAILED = 4;
  ERROR_MEDIA_CAPTURE_SCREEN_FAILED = 5;
  ERROR_SDP_NEGOTIATION_FAILED = 6;
  ERROR_OTHER = 99;
}

enum IceCandidateEvent {
  ICE_CANDIDATE_EVENT_UNSPECIFIED = 0;
  ICE_CANDIDATE_GATHERING_STARTED = 1;
  ICE_CANDIDATE_LOCAL_RELAY_FOUND = 2;
  ICE_CANDIDATE_LOCAL_HOST_FOUND = 3;
  ICE_CANDIDATE_LOCAL_SRFLX_FOUND = 4;
  ICE_CANDIDATE_LOCAL_PRFLX_FOUND = 5;
  ICE_CANDIDATE_REMOTE_RECEIVED = 6;
  ICE_CANDIDATE_REMOTE_RELAY_FOUND = 7;
  ICE_CANDIDATE_REMOTE_HOST_FOUND = 8;
  ICE_CANDIDATE_REMOTE_SRFLX_FOUND = 9;
  ICE_CANDIDATE_REMOTE_PRFLX_FOUND = 10;
  ICE_CANDIDATE_PAIRING_SUCCESS = 11;
  ICE_CANDIDATE_PAIRING_FAILED = 12;
  ICE_CANDIDATE_CONNECTION_STATE_CHANGED = 13;
  ICE_CANDIDATE_GATHERING_COMPLETED = 14;
  ICE_CANDIDATE_SELECTED_PAIR = 15;
}

enum SignalingEvent {
  SIGNALING_EVENT_UNSPECIFIED = 0;
  SIGNALING_OFFER_CREATED = 1;
  SIGNALING_OFFER_SENT = 2;
  SIGNALING_OFFER_RECEIVED = 3;
  SIGNALING_ANSWER_CREATED = 4;
  SIGNALING_ANSWER_SENT = 5;
  SIGNALING_ANSWER_RECEIVED = 6;
  SIGNALING_NEGOTIATION_NEEDED = 7;
  SIGNALING_ICE_RESTART_TRIGGERED = 8;
  SIGNALING_CONNECTED = 9;
  SIGNALING_DISCONNECTED = 10;
}

enum UserInteractionEvent {
  USER_INTERACTION_EVENT_UNSPECIFIED = 0;
  USER_JOINED_SESSION = 1;
  USER_LEFT_SESSION = 2;
  USER_MUTED_AUDIO = 3;
  USER_UNMUTED_AUDIO = 4;
  USER_MUTED_VIDEO = 5;
  USER_UNMUTED_VIDEO = 6;
  USER_SCREEN_SHARE_STARTED = 7;
  USER_SCREEN_SHARE_STOPPED = 8;
  USER_INPUT_TEXT_MESSAGE_SENT = 9;
  USER_INPUT_TEXT_MESSAGE_RECEIVED = 10;
}

enum MediaHandlingEvent {
  MEDIA_HANDLING_EVENT_UNSPECIFIED = 0;
  MEDIA_LOCAL_AUDIO_TRACK_ADDED = 1;
  MEDIA_LOCAL_VIDEO_TRACK_ADDED = 2;
  MEDIA_REMOTE_AUDIO_TRACK_ADDED = 3;
  MEDIA_REMOTE_VIDEO_TRACK_ADDED = 4;
  MEDIA_LOCAL_AUDIO_TRACK_REMOVED = 5;
  MEDIA_LOCAL_VIDEO_TRACK_REMOVED = 6;
  MEDIA_REMOTE_AUDIO_TRACK_REMOVED = 7;
  MEDIA_REMOTE_VIDEO_TRACK_REMOVED = 8;
  MEDIA_AUDIO_PLAYBACK_STARTED = 9;
  MEDIA_VIDEO_PLAYBACK_STARTED = 10;
  MEDIA_AUDIO_PLAYBACK_STOPPED = 11;
  MEDIA_VIDEO_PLAYBACK_STOPPED = 12;
}

enum IceConnectionType {
  ICE_CONNECTION_TYPE_UNKNOWN = 0;

  // Direct candidates.
  ICE_CONNECTION_TYPE_DIRECT_UDP = 1;
  ICE_CONNECTION_TYPE_DIRECT_TCP = 2;
  ICE_CONNECTION_TYPE_DIRECT_DTLS = 3;
  ICE_CONNECTION_TYPE_DIRECT_TLS = 4;

  // Relay candidates.
  ICE_CONNECTION_TYPE_RELAY_UDP = 5;
  ICE_CONNECTION_TYPE_RELAY_TCP = 6;
  ICE_CONNECTION_TYPE_RELAY_DTLS = 7;
  ICE_CONNECTION_TYPE_RELAY_TLS = 8;

  // Server-reflexive (srflx) candidates.
  ICE_CONNECTION_TYPE_SRFLX_UDP = 9;
  ICE_CONNECTION_TYPE_SRFLX_TCP = 10;
  ICE_CONNECTION_TYPE_SRFLX_DTLS = 11;
  ICE_CONNECTION_TYPE_SRFLX_TLS = 12;

  // Peer-reflexive (prflx) candidates.
  ICE_CONNECTION_TYPE_PRFLX_UDP = 13;
  ICE_CONNECTION_TYPE_PRFLX_TCP = 14;
  ICE_CONNECTION_TYPE_PRFLX_DTLS = 15;
  ICE_CONNECTION_TYPE_PRFLX_TLS = 16;
}

