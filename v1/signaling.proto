syntax = "proto3";

package pulsebeam.v1;
option optimize_for = CODE_SIZE;

service Signaling {
  rpc Prepare(PrepareReq) returns (PrepareResp);
  rpc Send(SendReq) returns (SendResp);
  rpc Recv(RecvReq) returns (stream RecvResp);
  rpc AnalyticsReport(AnalyticsReportReq) returns (AnalyticsReportResp);
}

message PrepareReq {
}

message PrepareResp {
  repeated IceServer ice_servers = 1;
}

message IceServer {
  repeated string urls = 1;
  optional string username = 2;
  optional string credential = 3;
}

message SendReq {
  Message msg = 1;
}

message SendResp {
}

message RecvReq {
  PeerInfo src = 1;
}

message RecvResp {
  Message msg = 1;
}

message PeerInfo {
  string group_id = 1;
  // where this message is originated from. Special values: "SYSTEM"
  string peer_id = 2;
  // used for deciding polite vs impolite. higher id wins. It also is used to detect connection breakages
  // WARNING, reserved values: 0-16
  uint32 conn_id = 3; 
}

// Use small tag numbers (1-15) for fields that are frequently used or are performance-sensitive, even if they are optional.
// Larger tag numbers (16 and above) can be used for fields that are optional and not frequently included in messages, as they will require more bytes to encode.
// Avoid the 19000â€“19999 range, as it's reserved.
// Consider future-proofing your schema by leaving gaps between field numbers to allow for extensions or new fields later.
message Message {
  MessageHeader header = 1;

  // payload will be treated as opaque in backend. Size limit is 10kB.
  MessagePayload payload = 2;
}

message MessagePayload {
  oneof payload_type {
    Signal signal = 1;
    Join join = 2;
    Bye bye = 3;
    Ack ack = 4;
    Ping ping = 5;
  }
}

message MessageHeader {
  PeerInfo src = 1;
  PeerInfo dst = 2;

  uint32 seqnum = 7;
  bool reliable = 8; // true: tcp like, false: fire & forget
}

message Signal {
  uint32 generation_counter = 1;
  // reserved for headers
  oneof data {
    Sdp sdp = 9;
    ICECandidate ice_candidate = 10;
    ICECandidateBatch ice_candidate_batch = 11;
  }
}

enum SdpKind {
  SDP_KIND_UNSPECIFIED = 0;
  SDP_KIND_OFFER = 1;
  SDP_KIND_ANSWER = 2;
  SDP_KIND_PRANSWER = 3;
  SDP_KIND_ROLLBACK = 4;
}

message Sdp {
  SdpKind kind = 1;
  string sdp = 2;
}

message ICECandidateBatch {
  repeated ICECandidate candidates = 1;
}

message ICECandidate {
  string candidate = 1;
  optional uint32 sdp_m_line_index = 2;
  optional string sdp_mid = 3;
  optional string username = 4;
  optional string password = 5;
}

message Join {
}

message Bye {
}

message Ack {
  repeated AckRange ack_ranges = 1;
}

message Ping {}

message AckRange {
  uint32 seqnum_start = 1;
  uint32 seqnum_end = 2;
}

message DataChannel {
  // reserved for headers

  oneof payload {
    DataChannelHeartbeat heartbeat = 10;
  }
}

message DataChannelHeartbeat {
}

message AnalyticsReportReq {
  repeated AnalyticsEvent events = 1;
}

message AnalyticsEvent {
  AnalyticsTags tags = 1;
  repeated AnalyticsMetrics metrics = 2; 
}

message AnalyticsTags {
  PeerInfo src = 1;
  PeerInfo dst = 2;
}

// "scaled" = trunc(X * 10^3)
message AnalyticsMetrics {
  sint64 timestamp_us = 1;

  optional EventType event_type = 2;
  // The overall derived quality score:
  // - 80-100: excellent
  // - 60-79: good
  // - 40-59: fair
  // - 20-39: poor
  // - 0-19: bad
  optional sint64 quality_score = 3;
  optional sint64 rtt_us = 4;
}

message AnalyticsReportResp {
}

enum EventType {
  UNKNOWN_EVENT = 0; // Default value, should always be the first

  // --- Error Reporting Events (Range: 1000 - 1099) ---
  EVENT_ERROR_REPORTING_BASE = 1000; // Base for error reporting events
  EVENT_ERROR_SIGNALING_CONNECTION_FAILED = 1001; // An error occurred with the signaling connection
  EVENT_ERROR_ICE_CONNECTION_FAILED = 1002; // An error occurred with the ICE connection
  EVENT_ERROR_MEDIA_CAPTURE_AUDIO_FAILED = 1003; // An error occurred while capturing audio
  EVENT_ERROR_MEDIA_CAPTURE_VIDEO_FAILED = 1004; // An error occurred while capturing video
  EVENT_ERROR_MEDIA_CAPTURE_SCREEN_FAILED = 1005; // An error occurred while capturing screen
  EVENT_ERROR_SDP_NEGOTIATION_FAILED = 1006; // An error occurred during SDP negotiation
  EVENT_ERROR_OTHER = 1099; // A general or uncategorized error

  // --- ICE Candidate Events (Range: 2000 - 2099) ---
  EVENT_ICE_CANDIDATE_BASE = 2000; // Base for ICE candidate related events
  EVENT_ICE_CANDIDATE_GATHERING_STARTED = 2001; // ICE gathering process initiated
  EVENT_ICE_CANDIDATE_LOCAL_REFLEXIVE_FOUND = 2002; // A reflexive ICE candidate was discovered
  EVENT_ICE_CANDIDATE_LOCAL_HOST_FOUND = 2003; // A host ICE candidate was discovered
  EVENT_ICE_CANDIDATE_LOCAL_SRFLX_FOUND = 2004; // A server-reflexive (STUN) ICE candidate was discovered
  EVENT_ICE_CANDIDATE_LOCAL_PRFLX_FOUND = 2005; // A peer-reflexive ICE candidate was discovered (less common)
  EVENT_ICE_CANDIDATE_REMOTE_RECEIVED = 2006; // An ICE candidate from the remote peer was received
  EVENT_ICE_CANDIDATE_REMOTE_REFLEXIVE_FOUND = 2007; // A reflexive ICE candidate was discovered
  EVENT_ICE_CANDIDATE_REMOTE_HOST_FOUND = 2008; // A host ICE candidate was discovered
  EVENT_ICE_CANDIDATE_REMOTE_SRFLX_FOUND = 2009; // A server-reflexive (STUN) ICE candidate was discovered
  EVENT_ICE_CANDIDATE_REMOTE_PRFLX_FOUND = 2010; // A peer-reflexive ICE candidate was discovered (less common)
  EVENT_ICE_CANDIDATE_PAIRING_SUCCESS = 2011; // ICE candidate pair succeeded in establishing a connection
  EVENT_ICE_CANDIDATE_PAIRING_FAILED = 2012; // ICE candidate pair failed to establish a connection
  EVENT_ICE_CANDIDATE_CONNECTION_STATE_CHANGED = 2013; // The ICE connection state has changed (e.g., connecting, connected, failed)
  EVENT_ICE_CANDIDATE_GATHERING_COMPLETED = 2014; // ICE gathering process finished
  EVENT_ICE_CANDIDATE_SELECTED_PAIR = 2015; // The best ICE candidate pair was selected for communication

  // --- Signaling Events (Range: 3000 - 3099) ---
  EVENT_SIGNALING_BASE = 3000; // Base for signaling related events
  EVENT_SIGNALING_OFFER_CREATED = 3001; // A signaling offer (e.g., SDP) was created locally
  EVENT_SIGNALING_OFFER_SENT = 3002; // A signaling offer was sent to the remote peer
  EVENT_SIGNALING_OFFER_RECEIVED = 3003; // A signaling offer was received from the remote peer
  EVENT_SIGNALING_ANSWER_CREATED = 3004; // A signaling answer (e.g., SDP) was created locally
  EVENT_SIGNALING_ANSWER_SENT = 3005; // A signaling answer was sent to the remote peer
  EVENT_SIGNALING_ANSWER_RECEIVED = 3006; // A signaling answer was received from the remote peer
  EVENT_SIGNALING_NEGOTIATION_NEEDED = 3007; // A signal indicating that negotiation is required
  EVENT_SIGNALING_ICE_RESTART_TRIGGERED = 3008; // A request to restart ICE negotiation was initiated
  EVENT_SIGNALING_CONNECTED = 3009; // Signaling connection established
  EVENT_SIGNALING_DISCONNECTED = 3010; // Signaling connection lost

  // --- User Interaction Events (Range: 4000 - 4099) ---
  EVENT_USER_INTERACTION_BASE = 4000; // Base for user interaction events
  EVENT_USER_JOINED_SESSION = 4001; // A user joined the communication session
  EVENT_USER_LEFT_SESSION = 4002; // A user left the communication session
  EVENT_USER_MUTED_AUDIO = 4003; // A user muted their audio
  EVENT_USER_UNMUTED_AUDIO = 4004; // A user unmuted their audio
  EVENT_USER_MUTED_VIDEO = 4005; // A user muted their video
  EVENT_USER_UNMUTED_VIDEO = 4006; // A user unmuted their video
  EVENT_USER_SCREEN_SHARE_STARTED = 4007; // A user started sharing their screen
  EVENT_USER_SCREEN_SHARE_STOPPED = 4008; // A user stopped sharing their screen
  EVENT_USER_INPUT_TEXT_MESSAGE_SENT = 4009; // A user sent a text message
  EVENT_USER_INPUT_TEXT_MESSAGE_RECEIVED = 4010; // A user received a text message

  // --- Media Handling Events (Range: 5000 - 5099) ---
  EVENT_MEDIA_HANDLING_BASE = 5000; // Base for media handling events
  EVENT_MEDIA_LOCAL_AUDIO_TRACK_ADDED = 5001; // A local audio track was added
  EVENT_MEDIA_LOCAL_VIDEO_TRACK_ADDED = 5002; // A local video track was added
  EVENT_MEDIA_REMOTE_AUDIO_TRACK_ADDED = 5003; // A remote audio track was added
  EVENT_MEDIA_REMOTE_VIDEO_TRACK_ADDED = 5004; // A remote video track was added
  EVENT_MEDIA_LOCAL_AUDIO_TRACK_REMOVED = 5005; // A local audio track was removed
  EVENT_MEDIA_LOCAL_VIDEO_TRACK_REMOVED = 5006; // A local video track was removed
  EVENT_MEDIA_REMOTE_AUDIO_TRACK_REMOVED = 5007; // A remote audio track was removed
  EVENT_MEDIA_REMOTE_VIDEO_TRACK_REMOVED = 5008; // A remote video track was removed
  EVENT_MEDIA_AUDIO_PLAYBACK_STARTED = 5009; // Audio playback started
  EVENT_MEDIA_VIDEO_PLAYBACK_STARTED = 5010; // Video playback started
  EVENT_MEDIA_AUDIO_PLAYBACK_STOPPED = 5011; // Audio playback stopped
  EVENT_MEDIA_VIDEO_PLAYBACK_STOPPED = 5012; // Video playback stopped

  // --- ICE Connection Type (Range: 6000 - 6099) ---
  CONNECTION_TYPE_UNKNOWN = 6000;
  CONNECTION_TYPE_DIRECT = 6001;
  CONNECTION_TYPE_RELAY = 6002;
  CONNECTION_TYPE_SRFLX = 6003; // Server Reflexive
  CONNECTION_TYPE_PRFLX = 6004;  // Peer Reflexive
}
