// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: tunnel.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SdpKind int32

const (
	SdpKind_SDP_KIND_UNSPECIFIED SdpKind = 0
	SdpKind_SDP_KIND_OFFER       SdpKind = 1
	SdpKind_SDP_KIND_ANSWER      SdpKind = 2
	SdpKind_SDP_KIND_PRANSWER    SdpKind = 3
	SdpKind_SDP_KIND_ROLLBACK    SdpKind = 4
)

// Enum value maps for SdpKind.
var (
	SdpKind_name = map[int32]string{
		0: "SDP_KIND_UNSPECIFIED",
		1: "SDP_KIND_OFFER",
		2: "SDP_KIND_ANSWER",
		3: "SDP_KIND_PRANSWER",
		4: "SDP_KIND_ROLLBACK",
	}
	SdpKind_value = map[string]int32{
		"SDP_KIND_UNSPECIFIED": 0,
		"SDP_KIND_OFFER":       1,
		"SDP_KIND_ANSWER":      2,
		"SDP_KIND_PRANSWER":    3,
		"SDP_KIND_ROLLBACK":    4,
	}
)

func (x SdpKind) Enum() *SdpKind {
	p := new(SdpKind)
	*p = x
	return p
}

func (x SdpKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdpKind) Descriptor() protoreflect.EnumDescriptor {
	return file_tunnel_proto_enumTypes[0].Descriptor()
}

func (SdpKind) Type() protoreflect.EnumType {
	return &file_tunnel_proto_enumTypes[0]
}

func (x SdpKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdpKind.Descriptor instead.
func (SdpKind) EnumDescriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{0}
}

type PrepareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrepareReq) Reset() {
	*x = PrepareReq{}
	mi := &file_tunnel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareReq) ProtoMessage() {}

func (x *PrepareReq) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareReq.ProtoReflect.Descriptor instead.
func (*PrepareReq) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{0}
}

type PrepareResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IceServers []*IceServer `protobuf:"bytes,1,rep,name=ice_servers,json=iceServers,proto3" json:"ice_servers,omitempty"`
}

func (x *PrepareResp) Reset() {
	*x = PrepareResp{}
	mi := &file_tunnel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareResp) ProtoMessage() {}

func (x *PrepareResp) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareResp.ProtoReflect.Descriptor instead.
func (*PrepareResp) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *PrepareResp) GetIceServers() []*IceServer {
	if x != nil {
		return x.IceServers
	}
	return nil
}

type IceServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls     []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	Username *string  `protobuf:"bytes,2,opt,name=username,proto3,oneof" json:"username,omitempty"`
}

func (x *IceServer) Reset() {
	*x = IceServer{}
	mi := &file_tunnel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IceServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceServer) ProtoMessage() {}

func (x *IceServer) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceServer.ProtoReflect.Descriptor instead.
func (*IceServer) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *IceServer) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *IceServer) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

type SendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg *Message `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SendReq) Reset() {
	*x = SendReq{}
	mi := &file_tunnel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendReq) ProtoMessage() {}

func (x *SendReq) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendReq.ProtoReflect.Descriptor instead.
func (*SendReq) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *SendReq) GetMsg() *Message {
	if x != nil {
		return x.Msg
	}
	return nil
}

type SendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendResp) Reset() {
	*x = SendResp{}
	mi := &file_tunnel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResp) ProtoMessage() {}

func (x *SendResp) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResp.ProtoReflect.Descriptor instead.
func (*SendResp) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{4}
}

type RecvReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PeerInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RecvReq) Reset() {
	*x = RecvReq{}
	mi := &file_tunnel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecvReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvReq) ProtoMessage() {}

func (x *RecvReq) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvReq.ProtoReflect.Descriptor instead.
func (*RecvReq) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *RecvReq) GetInfo() *PeerInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type RecvResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msgs []*Message `protobuf:"bytes,1,rep,name=msgs,proto3" json:"msgs,omitempty"`
}

func (x *RecvResp) Reset() {
	*x = RecvResp{}
	mi := &file_tunnel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecvResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvResp) ProtoMessage() {}

func (x *RecvResp) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvResp.ProtoReflect.Descriptor instead.
func (*RecvResp) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *RecvResp) GetMsgs() []*Message {
	if x != nil {
		return x.Msgs
	}
	return nil
}

type PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnId          uint32 `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`
	EnableDiscovery bool   `protobuf:"varint,2,opt,name=enable_discovery,json=enableDiscovery,proto3" json:"enable_discovery,omitempty"`
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	mi := &file_tunnel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{7}
}

func (x *PeerInfo) GetConnId() uint32 {
	if x != nil {
		return x.ConnId
	}
	return 0
}

func (x *PeerInfo) GetEnableDiscovery() bool {
	if x != nil {
		return x.EnableDiscovery
	}
	return false
}

// Use small tag numbers (1-15) for fields that are frequently used or are performance-sensitive, even if they are optional.
// Larger tag numbers (16 and above) can be used for fields that are optional and not frequently included in messages, as they will require more bytes to encode.
// Avoid the 19000–19999 range, as it's reserved.
// Consider future-proofing your schema by leaving gaps between field numbers to allow for extensions or new fields later.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// payload will be treated as opaque in backend. Size limit is 10kB.
	Payload *MessagePayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_tunnel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{8}
}

func (x *Message) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Message) GetPayload() *MessagePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MessagePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PayloadType:
	//
	//	*MessagePayload_Signal
	//	*MessagePayload_Join
	//	*MessagePayload_Bye
	//	*MessagePayload_Ack
	PayloadType isMessagePayload_PayloadType `protobuf_oneof:"payload_type"`
}

func (x *MessagePayload) Reset() {
	*x = MessagePayload{}
	mi := &file_tunnel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePayload) ProtoMessage() {}

func (x *MessagePayload) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePayload.ProtoReflect.Descriptor instead.
func (*MessagePayload) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{9}
}

func (m *MessagePayload) GetPayloadType() isMessagePayload_PayloadType {
	if m != nil {
		return m.PayloadType
	}
	return nil
}

func (x *MessagePayload) GetSignal() *Signal {
	if x, ok := x.GetPayloadType().(*MessagePayload_Signal); ok {
		return x.Signal
	}
	return nil
}

func (x *MessagePayload) GetJoin() *Join {
	if x, ok := x.GetPayloadType().(*MessagePayload_Join); ok {
		return x.Join
	}
	return nil
}

func (x *MessagePayload) GetBye() *Bye {
	if x, ok := x.GetPayloadType().(*MessagePayload_Bye); ok {
		return x.Bye
	}
	return nil
}

func (x *MessagePayload) GetAck() *Ack {
	if x, ok := x.GetPayloadType().(*MessagePayload_Ack); ok {
		return x.Ack
	}
	return nil
}

type isMessagePayload_PayloadType interface {
	isMessagePayload_PayloadType()
}

type MessagePayload_Signal struct {
	Signal *Signal `protobuf:"bytes,1,opt,name=signal,proto3,oneof"`
}

type MessagePayload_Join struct {
	Join *Join `protobuf:"bytes,2,opt,name=join,proto3,oneof"`
}

type MessagePayload_Bye struct {
	Bye *Bye `protobuf:"bytes,3,opt,name=bye,proto3,oneof"`
}

type MessagePayload_Ack struct {
	Ack *Ack `protobuf:"bytes,4,opt,name=ack,proto3,oneof"`
}

func (*MessagePayload_Signal) isMessagePayload_PayloadType() {}

func (*MessagePayload_Join) isMessagePayload_PayloadType() {}

func (*MessagePayload_Bye) isMessagePayload_PayloadType() {}

func (*MessagePayload_Ack) isMessagePayload_PayloadType() {}

type MessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId      string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PeerId       string `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`  // where this message is originated from. Special values: "SYSTEM"
	ConnId       uint32 `protobuf:"varint,3,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"` // used for deciding polite vs impolite. higher id wins. It also is used to detect connection breakages
	OtherGroupId string `protobuf:"bytes,4,opt,name=other_group_id,json=otherGroupId,proto3" json:"other_group_id,omitempty"`
	OtherPeerId  string `protobuf:"bytes,5,opt,name=other_peer_id,json=otherPeerId,proto3" json:"other_peer_id,omitempty"`  // Special values: "SYSTEM"
	OtherConnId  uint32 `protobuf:"varint,6,opt,name=other_conn_id,json=otherConnId,proto3" json:"other_conn_id,omitempty"` // Special values: 0-16
	Seqnum       uint32 `protobuf:"varint,7,opt,name=seqnum,proto3" json:"seqnum,omitempty"`
	Reliable     bool   `protobuf:"varint,8,opt,name=reliable,proto3" json:"reliable,omitempty"` // true: tcp like, false: fire & forget
}

func (x *MessageHeader) Reset() {
	*x = MessageHeader{}
	mi := &file_tunnel_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader) ProtoMessage() {}

func (x *MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader.ProtoReflect.Descriptor instead.
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{10}
}

func (x *MessageHeader) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *MessageHeader) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *MessageHeader) GetConnId() uint32 {
	if x != nil {
		return x.ConnId
	}
	return 0
}

func (x *MessageHeader) GetOtherGroupId() string {
	if x != nil {
		return x.OtherGroupId
	}
	return ""
}

func (x *MessageHeader) GetOtherPeerId() string {
	if x != nil {
		return x.OtherPeerId
	}
	return ""
}

func (x *MessageHeader) GetOtherConnId() uint32 {
	if x != nil {
		return x.OtherConnId
	}
	return 0
}

func (x *MessageHeader) GetSeqnum() uint32 {
	if x != nil {
		return x.Seqnum
	}
	return 0
}

func (x *MessageHeader) GetReliable() bool {
	if x != nil {
		return x.Reliable
	}
	return false
}

type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerationCounter uint32 `protobuf:"varint,1,opt,name=generation_counter,json=generationCounter,proto3" json:"generation_counter,omitempty"`
	// reserved for headers
	//
	// Types that are assignable to Data:
	//
	//	*Signal_Sdp
	//	*Signal_IceCandidate
	Data isSignal_Data `protobuf_oneof:"data"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	mi := &file_tunnel_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{11}
}

func (x *Signal) GetGenerationCounter() uint32 {
	if x != nil {
		return x.GenerationCounter
	}
	return 0
}

func (m *Signal) GetData() isSignal_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Signal) GetSdp() *Sdp {
	if x, ok := x.GetData().(*Signal_Sdp); ok {
		return x.Sdp
	}
	return nil
}

func (x *Signal) GetIceCandidate() *ICECandidate {
	if x, ok := x.GetData().(*Signal_IceCandidate); ok {
		return x.IceCandidate
	}
	return nil
}

type isSignal_Data interface {
	isSignal_Data()
}

type Signal_Sdp struct {
	Sdp *Sdp `protobuf:"bytes,9,opt,name=sdp,proto3,oneof"`
}

type Signal_IceCandidate struct {
	IceCandidate *ICECandidate `protobuf:"bytes,10,opt,name=ice_candidate,json=iceCandidate,proto3,oneof"`
}

func (*Signal_Sdp) isSignal_Data() {}

func (*Signal_IceCandidate) isSignal_Data() {}

type Sdp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind SdpKind `protobuf:"varint,1,opt,name=kind,proto3,enum=service.rpc.v1.SdpKind" json:"kind,omitempty"`
	Sdp  string  `protobuf:"bytes,2,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *Sdp) Reset() {
	*x = Sdp{}
	mi := &file_tunnel_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sdp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sdp) ProtoMessage() {}

func (x *Sdp) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sdp.ProtoReflect.Descriptor instead.
func (*Sdp) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{12}
}

func (x *Sdp) GetKind() SdpKind {
	if x != nil {
		return x.Kind
	}
	return SdpKind_SDP_KIND_UNSPECIFIED
}

func (x *Sdp) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type ICECandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate     string  `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	SdpMLineIndex *uint32 `protobuf:"varint,2,opt,name=sdp_m_line_index,json=sdpMLineIndex,proto3,oneof" json:"sdp_m_line_index,omitempty"`
	SdpMid        *string `protobuf:"bytes,3,opt,name=sdp_mid,json=sdpMid,proto3,oneof" json:"sdp_mid,omitempty"`
	Username      *string `protobuf:"bytes,4,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Password      *string `protobuf:"bytes,5,opt,name=password,proto3,oneof" json:"password,omitempty"`
}

func (x *ICECandidate) Reset() {
	*x = ICECandidate{}
	mi := &file_tunnel_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ICECandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICECandidate) ProtoMessage() {}

func (x *ICECandidate) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICECandidate.ProtoReflect.Descriptor instead.
func (*ICECandidate) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{13}
}

func (x *ICECandidate) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *ICECandidate) GetSdpMLineIndex() uint32 {
	if x != nil && x.SdpMLineIndex != nil {
		return *x.SdpMLineIndex
	}
	return 0
}

func (x *ICECandidate) GetSdpMid() string {
	if x != nil && x.SdpMid != nil {
		return *x.SdpMid
	}
	return ""
}

func (x *ICECandidate) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *ICECandidate) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type Join struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Join) Reset() {
	*x = Join{}
	mi := &file_tunnel_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join) ProtoMessage() {}

func (x *Join) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join.ProtoReflect.Descriptor instead.
func (*Join) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{14}
}

type Bye struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bye) Reset() {
	*x = Bye{}
	mi := &file_tunnel_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bye) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bye) ProtoMessage() {}

func (x *Bye) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bye.ProtoReflect.Descriptor instead.
func (*Bye) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{15}
}

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckRanges []*AckRange `protobuf:"bytes,1,rep,name=ack_ranges,json=ackRanges,proto3" json:"ack_ranges,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_tunnel_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{16}
}

func (x *Ack) GetAckRanges() []*AckRange {
	if x != nil {
		return x.AckRanges
	}
	return nil
}

type AckRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqnumStart uint32 `protobuf:"varint,1,opt,name=seqnum_start,json=seqnumStart,proto3" json:"seqnum_start,omitempty"`
	SeqnumEnd   uint32 `protobuf:"varint,2,opt,name=seqnum_end,json=seqnumEnd,proto3" json:"seqnum_end,omitempty"`
}

func (x *AckRange) Reset() {
	*x = AckRange{}
	mi := &file_tunnel_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRange) ProtoMessage() {}

func (x *AckRange) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRange.ProtoReflect.Descriptor instead.
func (*AckRange) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{17}
}

func (x *AckRange) GetSeqnumStart() uint32 {
	if x != nil {
		return x.SeqnumStart
	}
	return 0
}

func (x *AckRange) GetSeqnumEnd() uint32 {
	if x != nil {
		return x.SeqnumEnd
	}
	return 0
}

type DataChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*DataChannel_Heartbeat
	Payload isDataChannel_Payload `protobuf_oneof:"payload"`
}

func (x *DataChannel) Reset() {
	*x = DataChannel{}
	mi := &file_tunnel_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChannel) ProtoMessage() {}

func (x *DataChannel) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChannel.ProtoReflect.Descriptor instead.
func (*DataChannel) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{18}
}

func (m *DataChannel) GetPayload() isDataChannel_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *DataChannel) GetHeartbeat() *DataChannelHeartbeat {
	if x, ok := x.GetPayload().(*DataChannel_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

type isDataChannel_Payload interface {
	isDataChannel_Payload()
}

type DataChannel_Heartbeat struct {
	Heartbeat *DataChannelHeartbeat `protobuf:"bytes,10,opt,name=heartbeat,proto3,oneof"`
}

func (*DataChannel_Heartbeat) isDataChannel_Payload() {}

type DataChannelHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataChannelHeartbeat) Reset() {
	*x = DataChannelHeartbeat{}
	mi := &file_tunnel_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChannelHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChannelHeartbeat) ProtoMessage() {}

func (x *DataChannelHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChannelHeartbeat.ProtoReflect.Descriptor instead.
func (*DataChannelHeartbeat) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{19}
}

var File_tunnel_proto protoreflect.FileDescriptor

var file_tunnel_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x22, 0x0c,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x22, 0x49, 0x0a, 0x0b,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0b, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x09, 0x49, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x29, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x0a, 0x0a, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x37, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x76,
	0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x37, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x76, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a,
	0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x22, 0x4e, 0x0a, 0x08, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x22, 0x7a, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6a,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x03, 0x62, 0x79, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x79, 0x65, 0x48, 0x00, 0x52, 0x03, 0x62, 0x79, 0x65,
	0x12, 0x27, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x0d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x06, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x64, 0x70, 0x48, 0x00, 0x52, 0x03, 0x73, 0x64, 0x70, 0x12, 0x43, 0x0a,
	0x0d, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x45, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x03, 0x53, 0x64,
	0x70, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x64, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70,
	0x22, 0xf5, 0x01, 0x0a, 0x0c, 0x49, 0x43, 0x45, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x10, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x64, 0x70,
	0x4d, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x73, 0x64, 0x70, 0x4d, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x06, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e,
	0x22, 0x05, 0x0a, 0x03, 0x42, 0x79, 0x65, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x37,
	0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x61, 0x63,
	0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x08, 0x41, 0x63, 0x6b, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x6e, 0x75,
	0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71, 0x6e,
	0x75, 0x6d, 0x45, 0x6e, 0x64, 0x22, 0x5e, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2a, 0x7a, 0x0a,
	0x07, 0x53, 0x64, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x44, 0x50, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x44, 0x50, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f,
	0x46, 0x46, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x44, 0x50, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x44, 0x50, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x44, 0x50, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52,
	0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x32, 0xc2, 0x01, 0x0a, 0x06, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64,
	0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x52, 0x65, 0x63, 0x76, 0x12, 0x17, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63,
	0x76, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x52, 0x65, 0x73, 0x70, 0x42, 0x21,
	0x48, 0x02, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x72, 0x64, 0x65, 0x76, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tunnel_proto_rawDescOnce sync.Once
	file_tunnel_proto_rawDescData = file_tunnel_proto_rawDesc
)

func file_tunnel_proto_rawDescGZIP() []byte {
	file_tunnel_proto_rawDescOnce.Do(func() {
		file_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(file_tunnel_proto_rawDescData)
	})
	return file_tunnel_proto_rawDescData
}

var file_tunnel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_tunnel_proto_goTypes = []any{
	(SdpKind)(0),                 // 0: service.rpc.v1.SdpKind
	(*PrepareReq)(nil),           // 1: service.rpc.v1.PrepareReq
	(*PrepareResp)(nil),          // 2: service.rpc.v1.PrepareResp
	(*IceServer)(nil),            // 3: service.rpc.v1.IceServer
	(*SendReq)(nil),              // 4: service.rpc.v1.SendReq
	(*SendResp)(nil),             // 5: service.rpc.v1.SendResp
	(*RecvReq)(nil),              // 6: service.rpc.v1.RecvReq
	(*RecvResp)(nil),             // 7: service.rpc.v1.RecvResp
	(*PeerInfo)(nil),             // 8: service.rpc.v1.PeerInfo
	(*Message)(nil),              // 9: service.rpc.v1.Message
	(*MessagePayload)(nil),       // 10: service.rpc.v1.MessagePayload
	(*MessageHeader)(nil),        // 11: service.rpc.v1.MessageHeader
	(*Signal)(nil),               // 12: service.rpc.v1.Signal
	(*Sdp)(nil),                  // 13: service.rpc.v1.Sdp
	(*ICECandidate)(nil),         // 14: service.rpc.v1.ICECandidate
	(*Join)(nil),                 // 15: service.rpc.v1.Join
	(*Bye)(nil),                  // 16: service.rpc.v1.Bye
	(*Ack)(nil),                  // 17: service.rpc.v1.Ack
	(*AckRange)(nil),             // 18: service.rpc.v1.AckRange
	(*DataChannel)(nil),          // 19: service.rpc.v1.DataChannel
	(*DataChannelHeartbeat)(nil), // 20: service.rpc.v1.DataChannelHeartbeat
}
var file_tunnel_proto_depIdxs = []int32{
	3,  // 0: service.rpc.v1.PrepareResp.ice_servers:type_name -> service.rpc.v1.IceServer
	9,  // 1: service.rpc.v1.SendReq.msg:type_name -> service.rpc.v1.Message
	8,  // 2: service.rpc.v1.RecvReq.info:type_name -> service.rpc.v1.PeerInfo
	9,  // 3: service.rpc.v1.RecvResp.msgs:type_name -> service.rpc.v1.Message
	11, // 4: service.rpc.v1.Message.header:type_name -> service.rpc.v1.MessageHeader
	10, // 5: service.rpc.v1.Message.payload:type_name -> service.rpc.v1.MessagePayload
	12, // 6: service.rpc.v1.MessagePayload.signal:type_name -> service.rpc.v1.Signal
	15, // 7: service.rpc.v1.MessagePayload.join:type_name -> service.rpc.v1.Join
	16, // 8: service.rpc.v1.MessagePayload.bye:type_name -> service.rpc.v1.Bye
	17, // 9: service.rpc.v1.MessagePayload.ack:type_name -> service.rpc.v1.Ack
	13, // 10: service.rpc.v1.Signal.sdp:type_name -> service.rpc.v1.Sdp
	14, // 11: service.rpc.v1.Signal.ice_candidate:type_name -> service.rpc.v1.ICECandidate
	0,  // 12: service.rpc.v1.Sdp.kind:type_name -> service.rpc.v1.SdpKind
	18, // 13: service.rpc.v1.Ack.ack_ranges:type_name -> service.rpc.v1.AckRange
	20, // 14: service.rpc.v1.DataChannel.heartbeat:type_name -> service.rpc.v1.DataChannelHeartbeat
	1,  // 15: service.rpc.v1.Tunnel.Prepare:input_type -> service.rpc.v1.PrepareReq
	4,  // 16: service.rpc.v1.Tunnel.Send:input_type -> service.rpc.v1.SendReq
	6,  // 17: service.rpc.v1.Tunnel.Recv:input_type -> service.rpc.v1.RecvReq
	2,  // 18: service.rpc.v1.Tunnel.Prepare:output_type -> service.rpc.v1.PrepareResp
	5,  // 19: service.rpc.v1.Tunnel.Send:output_type -> service.rpc.v1.SendResp
	7,  // 20: service.rpc.v1.Tunnel.Recv:output_type -> service.rpc.v1.RecvResp
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_tunnel_proto_init() }
func file_tunnel_proto_init() {
	if File_tunnel_proto != nil {
		return
	}
	file_tunnel_proto_msgTypes[2].OneofWrappers = []any{}
	file_tunnel_proto_msgTypes[9].OneofWrappers = []any{
		(*MessagePayload_Signal)(nil),
		(*MessagePayload_Join)(nil),
		(*MessagePayload_Bye)(nil),
		(*MessagePayload_Ack)(nil),
	}
	file_tunnel_proto_msgTypes[11].OneofWrappers = []any{
		(*Signal_Sdp)(nil),
		(*Signal_IceCandidate)(nil),
	}
	file_tunnel_proto_msgTypes[13].OneofWrappers = []any{}
	file_tunnel_proto_msgTypes[18].OneofWrappers = []any{
		(*DataChannel_Heartbeat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tunnel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tunnel_proto_goTypes,
		DependencyIndexes: file_tunnel_proto_depIdxs,
		EnumInfos:         file_tunnel_proto_enumTypes,
		MessageInfos:      file_tunnel_proto_msgTypes,
	}.Build()
	File_tunnel_proto = out.File
	file_tunnel_proto_rawDesc = nil
	file_tunnel_proto_goTypes = nil
	file_tunnel_proto_depIdxs = nil
}
