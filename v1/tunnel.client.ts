// @generated by protobuf-ts 2.9.4 with parameter client_generic
// @generated from protobuf file "tunnel.proto" (package "github.com.signalerdev.rpc.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Tunnel } from "./tunnel.ts";
import type { RecvResp } from "./tunnel.ts";
import type { RecvReq } from "./tunnel.ts";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SendResp } from "./tunnel.ts";
import type { SendReq } from "./tunnel.ts";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service github.com.signalerdev.rpc.v1.Tunnel
 */
export interface ITunnelClient {
    /**
     * @generated from protobuf rpc: Send(github.com.signalerdev.rpc.v1.SendReq) returns (github.com.signalerdev.rpc.v1.SendResp);
     */
    send(input: SendReq, options?: RpcOptions): UnaryCall<SendReq, SendResp>;
    /**
     * @generated from protobuf rpc: Recv(github.com.signalerdev.rpc.v1.RecvReq) returns (github.com.signalerdev.rpc.v1.RecvResp);
     */
    recv(input: RecvReq, options?: RpcOptions): UnaryCall<RecvReq, RecvResp>;
}
/**
 * @generated from protobuf service github.com.signalerdev.rpc.v1.Tunnel
 */
export class TunnelClient implements ITunnelClient, ServiceInfo {
    typeName = Tunnel.typeName;
    methods = Tunnel.methods;
    options = Tunnel.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Send(github.com.signalerdev.rpc.v1.SendReq) returns (github.com.signalerdev.rpc.v1.SendResp);
     */
    send(input: SendReq, options?: RpcOptions): UnaryCall<SendReq, SendResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendReq, SendResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Recv(github.com.signalerdev.rpc.v1.RecvReq) returns (github.com.signalerdev.rpc.v1.RecvResp);
     */
    recv(input: RecvReq, options?: RpcOptions): UnaryCall<RecvReq, RecvResp> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecvReq, RecvResp>("unary", this._transport, method, opt, input);
    }
}
